from django.shortcuts import render, render_to_response
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.models import User
from django.core.context_processors import csrf
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login
from django.core.urlresolvers import reverse

from django.core.paginator import Paginator



from django import forms
from django.views.generic.edit import FormView

from main.tasks import submit_data, uploadIccbLibrary
from main.forms import UploadFileForm
from main.models import data, project, submission, rawDataFile




# Create your views here.

#def handle_uploaded_file(f):
#    with open('some/file/name.txt', 'wb+') as destination:
#        for chunk in f.chunks():
#            destination.write(chunk)

def index(request):
    return render(request, "main/index.html")
#"""request.FILES['datafile'],"""'test','longfei',['1','2']


def datalist(request):
    entry_list = data.objects.all()
    field_list = data._meta.fields
   
    current_page = (request.GET.get('page'))
        
    p = Paginator(entry_list,30)    
    
    if not current_page:
        current_page=1
    
    if int(current_page)+3 >= p.num_pages:
        page_range = range(p.num_pages - 7, p.num_pages)
    else:
        page_range = range(max(1,int(current_page)-3),max(1,int(current_page)-3)+7) 
        

    return render_to_response( "main/data_list.html",{'entry_list': p.page(current_page),
                                                  'field_list': field_list,
                                                  'pages': page_range,
                                                  'last_page':p.num_pages
                                                })

def upload(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        
        if not form.is_valid():
            return render_to_response('main/error.html',{'error_msg':"WTF, you can't even fill a form right? HAAAAAA!"})

        submit_data(request.FILES['datafile'],'test','longfei',request.POST.get('library'),request.POST.get('plates').split(','))
        return HttpResponseRedirect('/main/view/')

#            handle_uploaded_file(request.FILES['file'])
#            return HttpResponseRedirect('/success/url/')

    else:    #a form to upload raw data
        form = UploadFileForm(initial={'library':'test','plates':'1,2'})
        c={'form': form}
        c.update(csrf(request))
    return render_to_response('main/upload.html', c)


#==============================================================================
## test viewes from QY

## The summary page for all the data generated by one user
def tasks(request):    
    return render(request,'main/tasks.html')

#def submit_table(request):
#    return render(request, 'main/submittable.html')
    
def submit_analysis(request):
    return render(request, 'main/submit2.html')
    
## A class for upload raw datafiles and store at /media/ folder,
    

class upload_raw_datafile(FormView):
    """A class for upload raw datafiles and store at /media/ folder. 
    A more complete version of submit_table_view    
    """

    template_name = 'main/submittable.html'
    form_class = UploadFileForm
    
    def form_valid(self,form):
        raw_datafile = rawDataFile(
            datafile = self.get_form_kwargs().get('files')['datafile'])
        raw_datafile.save()
        self.id = raw_datafile.id
        
        return HttpResponseRedirect(self.get_success_url())
    
    def get_success_url(self):
        """ The reture url for successful upload
        """
        ## to be completed
        return reverse("tasks") 

def upload_iccb_library(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
#            result=uploadIccbLibrary(request.FILES['datafile'])
            result=uploadIccbLibrary('/main/testset_ICCB_parsed.json')
            return HttpResponse(result)
#            handle_uploaded_file(request.FILES['file'])
#            return HttpResponseRedirect('/success/url/')
    else:    #a form to upload raw data
        form = UploadFileForm()
        c={'form': form}
        c.update(csrf(request))
    return render(request, 'main/uploadlibrary.html', c)
